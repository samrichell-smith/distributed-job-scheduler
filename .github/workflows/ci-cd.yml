name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend CI Job
  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting (allow warnings)
      run: npm run lint || true

    - name: Run type checking
      run: npm run type-check

    # - name: Run tests
    #   run: npm test

    - name: Build frontend
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  # Backend/API CI Job
  api-ci:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Setup test database
      run: |
        # Create test database and run any setup SQL
        PGPASSWORD=test_password psql -h localhost -U test_user -d test_db -c "SELECT 1;"

    - name: Install Redis CLI
      run: sudo apt-get update && sudo apt-get install -y redis-tools

    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for postgres..."
          sleep 2
        done
        
        # Wait for Redis and test it's actually working
        until redis-cli -h localhost -p 6379 ping | grep -q "PONG"; do
          echo "Waiting for redis..."
          sleep 2
        done
        echo "Redis is ready and responding!"
        
        # Test Redis functionality
        redis-cli -h localhost -p 6379 set test_key "test_value"
        RESULT=$(redis-cli -h localhost -p 6379 get test_key)
        if [ "$RESULT" = "test_value" ]; then
          echo "‚úÖ Redis is working correctly"
        else
          echo "‚ùå Redis test failed"
          exit 1
        fi
        redis-cli -h localhost -p 6379 del test_key

    - name: Run tests with timeout
      run: go test -v ./... -timeout=60s
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_DB: test_db
        POSTGRES_SSL_MODE: disable
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Build API
      run: go build -o ./bin/api ./cmd/api.go

    - name: Upload API binary
      uses: actions/upload-artifact@v4
      with:
        name: api-binary
        path: bin/api

  # Docker Build Job
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-ci, api-ci]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub (optional)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      # Only login if you want to push to Docker Hub

    - name: Build and test Docker images
      run: |
        docker-compose build
        docker-compose up -d
        sleep 30  # Wait for services to start
        
        # Basic health checks
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:3000 || exit 1
        
        docker-compose down

  # Deployment Job (runs only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."

    - name: Notify deployment success
      run: |
        echo "‚úÖ Deployment successful!"

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'